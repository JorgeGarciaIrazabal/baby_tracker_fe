/* tslint:disable */
/* eslint-disable */
/**
 * Baby Tracker
 * Track everything your baby does
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Baby,
    BabyFromJSON,
    BabyToJSON,
    Feed,
    FeedFromJSON,
    FeedToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    Parent,
    ParentFromJSON,
    ParentToJSON,
    ParentWithToken,
    ParentWithTokenFromJSON,
    ParentWithTokenToJSON,
} from '../models';

export interface CreateBabyRequest {
    baby: Baby;
    authorization?: string;
}

export interface CreateFeedRequest {
    feed: Feed;
    authorization?: string;
}

export interface DeleteFeedRequest {
    id: number;
    authorization?: string;
}

export interface GetBabyFeedsRequest {
    babyId: number;
    startAt?: Date;
    endAt?: Date;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetParentRequest {
    authorization?: string;
}

export interface GetParentsBabyRequest {
    id: number;
    authorization?: string;
}

export interface NewParentForBabyRequest {
    id: number;
    newParentEmail: string;
    authorization?: string;
}

export interface PingRequest {
    authorization?: string;
}

export interface RemoveParentsBabyRequest {
    babyId: number;
    parentId: number;
    authorization?: string;
}

export interface SignInRequest {
    email: string;
    password: string;
    authorization?: string;
}

export interface SignUpRequest {
    parent: Parent;
    authorization?: string;
}

export interface UpdateBabyRequest {
    id: number;
    baby: Baby;
    authorization?: string;
}

export interface UpdateFeedRequest {
    feed: Feed;
    authorization?: string;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * Create Baby
     */
    async createBabyRaw(requestParameters: CreateBabyRequest): Promise<runtime.ApiResponse<Baby>> {
        if (requestParameters.baby === null || requestParameters.baby === undefined) {
            throw new runtime.RequiredError('baby','Required parameter requestParameters.baby was null or undefined when calling createBaby.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BabyToJSON(requestParameters.baby),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BabyFromJSON(jsonValue));
    }

    /**
     * Create Baby
     */
    async createBaby(requestParameters: CreateBabyRequest): Promise<Baby> {
        const response = await this.createBabyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Feed
     */
    async createFeedRaw(requestParameters: CreateFeedRequest): Promise<runtime.ApiResponse<Feed>> {
        if (requestParameters.feed === null || requestParameters.feed === undefined) {
            throw new runtime.RequiredError('feed','Required parameter requestParameters.feed was null or undefined when calling createFeed.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/feed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedToJSON(requestParameters.feed),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedFromJSON(jsonValue));
    }

    /**
     * Create Feed
     */
    async createFeed(requestParameters: CreateFeedRequest): Promise<Feed> {
        const response = await this.createFeedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete Feed
     */
    async deleteFeedRaw(requestParameters: DeleteFeedRequest): Promise<runtime.ApiResponse<Feed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFeed.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/feed/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedFromJSON(jsonValue));
    }

    /**
     * Delete Feed
     */
    async deleteFeed(requestParameters: DeleteFeedRequest): Promise<Feed> {
        const response = await this.deleteFeedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Baby Feeds
     */
    async getBabyFeedsRaw(requestParameters: GetBabyFeedsRequest): Promise<runtime.ApiResponse<Array<Feed>>> {
        if (requestParameters.babyId === null || requestParameters.babyId === undefined) {
            throw new runtime.RequiredError('babyId','Required parameter requestParameters.babyId was null or undefined when calling getBabyFeeds.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startAt !== undefined) {
            queryParameters['start_at'] = (requestParameters.startAt as any).toISOString();
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['end_at'] = (requestParameters.endAt as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby/{baby_id}/feed`.replace(`{${"baby_id"}}`, encodeURIComponent(String(requestParameters.babyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeedFromJSON));
    }

    /**
     * Get Baby Feeds
     */
    async getBabyFeeds(requestParameters: GetBabyFeedsRequest): Promise<Array<Feed>> {
        const response = await this.getBabyFeedsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Parent
     */
    async getParentRaw(requestParameters: GetParentRequest): Promise<runtime.ApiResponse<Parent>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/parent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ParentFromJSON(jsonValue));
    }

    /**
     * Get Parent
     */
    async getParent(requestParameters: GetParentRequest): Promise<Parent> {
        const response = await this.getParentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Parents Baby
     */
    async getParentsBabyRaw(requestParameters: GetParentsBabyRequest): Promise<runtime.ApiResponse<Baby>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getParentsBaby.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby/parent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BabyFromJSON(jsonValue));
    }

    /**
     * Get Parents Baby
     */
    async getParentsBaby(requestParameters: GetParentsBabyRequest): Promise<Baby> {
        const response = await this.getParentsBabyRaw(requestParameters);
        return await response.value();
    }

    /**
     * New Parent For Baby
     */
    async newParentForBabyRaw(requestParameters: NewParentForBabyRequest): Promise<runtime.ApiResponse<Baby>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling newParentForBaby.');
        }

        if (requestParameters.newParentEmail === null || requestParameters.newParentEmail === undefined) {
            throw new runtime.RequiredError('newParentEmail','Required parameter requestParameters.newParentEmail was null or undefined when calling newParentForBaby.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.newParentEmail !== undefined) {
            queryParameters['new_parent_email'] = requestParameters.newParentEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby/{id}/new_parent`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BabyFromJSON(jsonValue));
    }

    /**
     * New Parent For Baby
     */
    async newParentForBaby(requestParameters: NewParentForBabyRequest): Promise<Baby> {
        const response = await this.newParentForBabyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ping
     */
    async pingRaw(requestParameters: PingRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Ping
     */
    async ping(requestParameters: PingRequest): Promise<string> {
        const response = await this.pingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove Parents Baby
     */
    async removeParentsBabyRaw(requestParameters: RemoveParentsBabyRequest): Promise<runtime.ApiResponse<Baby>> {
        if (requestParameters.babyId === null || requestParameters.babyId === undefined) {
            throw new runtime.RequiredError('babyId','Required parameter requestParameters.babyId was null or undefined when calling removeParentsBaby.');
        }

        if (requestParameters.parentId === null || requestParameters.parentId === undefined) {
            throw new runtime.RequiredError('parentId','Required parameter requestParameters.parentId was null or undefined when calling removeParentsBaby.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby/{baby_id}/parent/{parent_id}`.replace(`{${"baby_id"}}`, encodeURIComponent(String(requestParameters.babyId))).replace(`{${"parent_id"}}`, encodeURIComponent(String(requestParameters.parentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BabyFromJSON(jsonValue));
    }

    /**
     * Remove Parents Baby
     */
    async removeParentsBaby(requestParameters: RemoveParentsBabyRequest): Promise<Baby> {
        const response = await this.removeParentsBabyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sign In
     */
    async signInRaw(requestParameters: SignInRequest): Promise<runtime.ApiResponse<ParentWithToken>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling signIn.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling signIn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/sign_in`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ParentWithTokenFromJSON(jsonValue));
    }

    /**
     * Sign In
     */
    async signIn(requestParameters: SignInRequest): Promise<ParentWithToken> {
        const response = await this.signInRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sign Up
     */
    async signUpRaw(requestParameters: SignUpRequest): Promise<runtime.ApiResponse<ParentWithToken>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling signUp.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/sign_up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParentToJSON(requestParameters.parent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ParentWithTokenFromJSON(jsonValue));
    }

    /**
     * Sign Up
     */
    async signUp(requestParameters: SignUpRequest): Promise<ParentWithToken> {
        const response = await this.signUpRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update Baby
     */
    async updateBabyRaw(requestParameters: UpdateBabyRequest): Promise<runtime.ApiResponse<Baby>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBaby.');
        }

        if (requestParameters.baby === null || requestParameters.baby === undefined) {
            throw new runtime.RequiredError('baby','Required parameter requestParameters.baby was null or undefined when calling updateBaby.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/baby/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BabyToJSON(requestParameters.baby),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BabyFromJSON(jsonValue));
    }

    /**
     * Update Baby
     */
    async updateBaby(requestParameters: UpdateBabyRequest): Promise<Baby> {
        const response = await this.updateBabyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update Feed
     */
    async updateFeedRaw(requestParameters: UpdateFeedRequest): Promise<runtime.ApiResponse<Feed>> {
        if (requestParameters.feed === null || requestParameters.feed === undefined) {
            throw new runtime.RequiredError('feed','Required parameter requestParameters.feed was null or undefined when calling updateFeed.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/feed`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeedToJSON(requestParameters.feed),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedFromJSON(jsonValue));
    }

    /**
     * Update Feed
     */
    async updateFeed(requestParameters: UpdateFeedRequest): Promise<Feed> {
        const response = await this.updateFeedRaw(requestParameters);
        return await response.value();
    }

}
