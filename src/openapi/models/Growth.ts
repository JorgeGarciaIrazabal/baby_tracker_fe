/* tslint:disable */
/* eslint-disable */
/**
 * Baby Tracker
 * Track everything your baby does
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GrowthTypes,
    GrowthTypesFromJSON,
    GrowthTypesFromJSONTyped,
    GrowthTypesToJSON,
} from './';

/**
 * 
 * @export
 * @interface Growth
 */
export interface Growth {
    /**
     * 
     * @type {number}
     * @memberof Growth
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Growth
     */
    at?: Date;
    /**
     * 
     * @type {number}
     * @memberof Growth
     */
    babyId?: number;
    /**
     * 
     * @type {GrowthTypes}
     * @memberof Growth
     */
    type: GrowthTypes;
    /**
     * 
     * @type {number}
     * @memberof Growth
     */
    measure?: number;
}

export function GrowthFromJSON(json: any): Growth {
    return GrowthFromJSONTyped(json, false);
}

export function GrowthFromJSONTyped(json: any, ignoreDiscriminator: boolean): Growth {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'at': !exists(json, 'at') ? undefined : (new Date(json['at'])),
        'babyId': !exists(json, 'baby_id') ? undefined : json['baby_id'],
        'type': GrowthTypesFromJSON(json['type']),
        'measure': !exists(json, 'measure') ? undefined : json['measure'],
    };
}

export function GrowthToJSON(value?: Growth | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'at': value.at === undefined ? undefined : (value.at.toISOString()),
        'baby_id': value.babyId,
        'type': GrowthTypesToJSON(value.type),
        'measure': value.measure,
    };
}


